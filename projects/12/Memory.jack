// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in  
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0 
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory, freeList;
    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let freeList = 2048;
        let freeList[0] = null; // next free block
        let freeList[1] = 16384 - freeList; // size of current block  
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array currBaseAddress, prev;
        
        let currBaseAddress = freeList;

        if (~(size > 0)) {
            return -1;
        }

        let prev = null;

        while (size > currBaseAddress[1] + 1) {
            let prev = currBaseAddress;
            let currBaseAddress = currBaseAddress[0];
            if (currBaseAddress[0] = null) {return -1;}
        }
        // Take the entire block
        if (currBaseAddress[1] < (size + 2)) {
          
            if (prev = null) {let freeList = currBaseAddress[0];}
            else {let prev[0] = currBaseAddress[0];}
            
        
        // Take some of the block, the rest stays
        } else {
            let currBaseAddress[size+1] = currBaseAddress[0];
            let currBaseAddress[size+2] = currBaseAddress[1] - size - 1;
            
            if (prev = null) {let freeList = currBaseAddress + size + 1;}
            else {let prev[0] = currBaseAddress + size + 1;}

        }
        let currBaseAddress[0] = size + 1 ;
        return (currBaseAddress + 1);
             
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array segment;
        let segment = o-1;
        let segment[1] = segment[0];
        let segment[0] = freeList;   
        let freeList = segment;
        return;
    }
    

    /** Returns the maximal element contained in the given Array/object. */
	function int max(Array o) {
        var int maxElement, segment, size, i;
        let segment = o;
        let size = segment[-1] - 1;
        let maxElement = o[0];

        while (i < size) {
            if (o[i] > maxElement) {
                let maxElement = o[i];
            }
            let i = i + 1;
        }
        return maxElement;
    }
}
