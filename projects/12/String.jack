// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int len;
    field int maxLen;


    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 1){
            let maxLength = 1;
        }
        let maxLen = maxLength;
        let str = Array.new(maxLength);
        let len = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (maxLen > len) {
            let str[len] = c;
            let len = len + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len > 0) {
            let str[len-1] = 0;
            let len = len - 1;
        }
        return;

    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i , d;
        var boolean neg;
        let neg = false;
        let val = 0;
        let i = 0;
        if (str[0] = 45) {
            let neg = true;
            let i = i+1;
            }
        
        while (i < len){
            if ((str[i] < 58) & (str[i] > 47)) {
                let d = String.char2Int(str[i]);
                let val = (val * 10) + d;
                let i = i+1;
            } else {let i = len; }
        } 

        if (neg) {return -(val);}
        return val;    
    }


    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int newVal;
        let len = 0;
        let newVal = val;
        if (val < 0) {
            let newVal = -val;
            do appendChar(45);}
        do appendChar(setIntHelper(newVal));
        return;

    }

    method char setIntHelper(int val) {
        var int division, lastDigit;
        var char c;
        let division = val / 10;
        let lastDigit = val - (division * 10);
        let c = String.int2Char(lastDigit);
        if (val < 10) {
            return c;
        } else {
            do appendChar(setIntHelper(division));
            return c;
        } 
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    function char int2Char(int x) {
        return x + 48; 
    }

    function int char2Int(char c) {
        return c - 48; 
    }
}
